"use client";

import React, { useMemo, useState } from "react";
import {
  Form,
  Input,
  Select,
  Switch,
  Modal,
  message,
  Table,
  Tag,
  Space,
  Tooltip,
} from "antd";
import "@ant-design/v5-patch-for-react-19";
import dynamic from "next/dynamic";
// ๐ ุงุณุชุฎุฏู react-quill-new ุจุฏู react-quill
import "react-quill-new/dist/quill.snow.css";
import PageLayout from "../../../components/layout/PageLayout";
import BreadcrumbsShowcase from "../../../components/ui/BreadCrumbs";
import PagesHeader from "../../../components/ui/PagesHeader";
import Button from "../../../components/atoms/Button";
import {
  BarChart3,
  Headset,
  Plus,
  Save,
  ExternalLink,
  Edit3,
  Trash2,
  Eye,
  EyeOff,
  MoveUp,
  MoveDown,
  Video,
  FileText,
  Search,
  Filter,
} from "lucide-react";

// ๐ Dynamic import ูุน ุชุนุทูู SSR
const ReactQuill = dynamic(() => import("react-quill-new"), { ssr: false });
const { TextArea } = Input;

const breadcrumbs = [
  { label: "ุงูุฑุฆูุณูุฉ", href: "/", icon: BarChart3 },
  { label: "ุงูุฏุนู ุงูููู", href: "#", icon: Headset, current: true },
];

// ==== Helpers ===============================================================
const toWaLink = (num) => {
  const digits = (num || "").replace(/\D+/g, "");
  return digits ? `https://wa.me/${digits}` : "";
};

const stripHtml = (html = "") =>
  html.replace(/<[^>]+>/g, " ").replace(/\s+/g, " ").trim();

const nl2br = (text = "") => text.replace(/\n/g, "<br/>");

const quillModules = {
  toolbar: [
    [{ header: [false, 3, 4, 5] }],
    ["bold", "italic", "underline"],
    [{ list: "ordered" }, { list: "bullet" }],
    [{ align: [] }],
    ["link"],
    ["clean"],
  ],
  clipboard: { matchVisual: true },
};

// ==== Seeds ================================================================
const initialSettings = {
  heroTitle: "ุงูุฏุนู ุงูููู",
  heroSubtitle: "ููุฏูู ูู ูููุงุช ุฏุนู ุณุฑูุนุฉ ููุงุถุญุฉ ูุญู ุฃู ูุดููุฉ ุชูุงุฌูู.",
  whatsappNumber: "+966 55 123 4567",
  whatsappLabel: "ุนุจุฑ ูุงุชุณุงุจ ูู ููุง",
  supportEmail: "support@example.com",
  workingNote:
    "ุฎูุงู ุฃูุงู ุงูุฃุณุจูุน (ุงูุฃุญุฏ ุฅูู ุงูุฎููุณ) ูู ุงูุณุงุนุฉ 9 ุต ุญุชู 5 ู. ูุชู ุงูุฑุฏ ุนุงุฏุฉ ุฎูุงู 24 ุณุงุนุฉ ุนููุ ููุฏ ููุชุฏ ูู 48 ุณุงุนุฉ ูู ุฃููุงุช ุงูุฐุฑูุฉ.",
  resolutionNote:
    "ุณูู ูุนุงูุฌุฉ ุงููุดููุงุช: ุงุณุชูุจุงู (24 ุณุงุนุฉ) โ ุชุดุฎูุต (2-3 ุฃูุงู) โ ุญู ุชููู ูุชูุงูู ุฎูุงู ุฃุณุจูุน ุฅูู ุฃุณุจูุนูู ุญุณุจ ุทุจูุนุฉ ุงููุดููุฉ.",
  showEmail: true,
  showWhatsApp: true,
};

const initialFaqs = [
  {
    id: 1,
    question: "ูุง ูู ูููุงุช ุงูุฏุนู ุงููููุ",
    answerHtml: nl2br("โข ุงููุญุงุฏุซุฉ ุงููุจุงุดุฑุฉ ุฏุงุฎู ุงูููุตุฉ.\nโข ุนุจุฑ ูุงุชุณุงุจ ูู ููุง.\nโข ุงูุจุฑูุฏ ุงูุฅููุชุฑููู."),
    visible: true,
    order: 1,
  },
  {
    id: 2,
    question: "ูุง ูู ุงูุฃููุงุช ุงูุชู ุณูุชู ุงูุฅุฌุงุจุฉ ูููุง ุนูู ุงุณุชูุณุงุฑุงุชูุ",
    answerHtml: nl2br(
      "ุฎูุงู ุฃูุงู ุงูุฃุณุจูุน ูู ุงูุฃุญุฏ ุฅูู ุงูุฎููุณ 9 ุต โ 5 ู. ุงูุฑุฏ ุนุงุฏุฉ ุฎูุงู 24 ุณุงุนุฉ ุนููุ ููุฏ ููุชุฏ 48 ุณุงุนุฉ ูู ุฃููุงุช ุงูุฐุฑูุฉ."
    ),
    visible: true,
    order: 2,
  },
  {
    id: 3,
    question: "ุงูููุช ุงููุชููุน ูุญู ุงููุดููุฉ",
    answerHtml: nl2br(
      "ุชุฎุชูู ุงููุฏุฉ ุญุณุจ ููุน ุงููุดููุฉ. ุงููุดููุงุช ุงูุจุณูุทุฉ: ุฎูุงู 24โ48 ุณุงุนุฉ. ุงููุดููุงุช ุงูุชูููุฉ ุงููุชูุฏูุฉ: ุฎูุงู ุฃุณุจูุน ุฅูู ุฃุณุจูุนูู."
    ),
    visible: true,
    order: 3,
  },
];

const initialKB = [
  {
    id: 1,
    title: "ููููุฉ ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ",
    type: "article",
    category: "ุงูุญุณุงุจุงุช",
    url: "/help/create-account",
    visible: true,
  },
  {
    id: 2,
    title: "ุงูุฏูุน ุนุจุฑ ุงูุจุทุงูุฉ ุฎุทูุฉ ุจุฎุทูุฉ",
    type: "video",
    category: "ุงูุฏูุน",
    url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    visible: true,
  },
  {
    id: 3,
    title: "ุฑูุน ุงููุงุฌุจุงุช ูู ุงูุฌูุงู",
    type: "article",
    category: "ุงููุงุฌุจุงุช",
    url: "/help/upload-homework",
    visible: false,
  },
];

// ==== Subcomponents =========================================================
function TabPill({ active, onClick, label }) {
  return (
    <button
      type="button"
      onClick={onClick}
      aria-pressed={active}
      className={[
        "px-4 py-2 rounded-2xl text-sm font-medium transition-all border",
        active
          ? "bg-gradient-to-r from-sky-500 to-cyan-600 text-white border-transparent shadow"
          : "bg-white text-gray-700 border-gray-200 hover:bg-gray-50",
      ].join(" ")}
    >
      {label}
    </button>
  );
}

function SectionCard({ title, children, extra }) {
  return (
    <div className="bg-white rounded-2xl border border-gray-100 shadow-sm p-5">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-bold text-gray-800">{title}</h3>
        {extra}
      </div>
      {children}
    </div>
  );
}

// ==== Page ==================================================================
export default function page() {
  const [activeTab, setActiveTab] = useState("channels");

  // Settings (support channels)
  const [settings, setSettings] = useState(initialSettings);
  const [savingSettings, setSavingSettings] = useState(false);

  // FAQs
  const [faqs, setFaqs] = useState(initialFaqs);
  const [faqModalOpen, setFaqModalOpen] = useState(false);
  const [editingFaq, setEditingFaq] = useState(null);

  // Knowledge base (articles/videos)
  const [kb, setKb] = useState(initialKB);
  const [kbModalOpen, setKbModalOpen] = useState(false);
  const [editingKb, setEditingKb] = useState(null);

  // FAQ search & filter
  const [faqQuery, setFaqQuery] = useState("");
  const [faqVisFilter, setFaqVisFilter] = useState("all"); // all | visible | hidden

  // Derived
  const sortedFaqs = useMemo(
    () => [...faqs].sort((a, b) => a.order - b.order),
    [faqs]
  );

  const filteredFaqs = useMemo(() => {
    let list = sortedFaqs;
    if (faqVisFilter === "visible") list = list.filter((f) => f.visible);
    if (faqVisFilter === "hidden") list = list.filter((f) => !f.visible);
    if (faqQuery.trim()) {
      const q = faqQuery.trim().toLowerCase();
      list = list.filter(
        (f) =>
          (f.question || "").toLowerCase().includes(q) ||
          stripHtml(f.answerHtml || "").toLowerCase().includes(q)
      );
    }
    return list;
  }, [sortedFaqs, faqQuery, faqVisFilter]);

  // ==== Actions: Settings ===================================================
  const handleSaveSettings = async (values) => {
    setSavingSettings(true);
    try {
      const clean = { ...settings, ...values };
      setSettings(clean);
      // TODO: call API (PUT /support/settings) with `clean`
      message.success("ุชู ุญูุธ ุฅุนุฏุงุฏุงุช ุงูุฏุนู ุงูููู ุจูุฌุงุญ");
    } catch (e) {
      message.error("ุชุนุฐุฑ ุงูุญูุธ. ุญุงูู ูุฑุฉ ุฃุฎุฑู.");
    } finally {
      setSavingSettings(false);
    }
  };

  // ==== Actions: FAQs =======================================================
  const openNewFaq = () => {
    setEditingFaq(null);
    setFaqModalOpen(true);
  };
  const openEditFaq = (rec) => {
    setEditingFaq(rec);
    setFaqModalOpen(true);
  };
  const deleteFaq = (id) => {
    setFaqs((prev) => prev.filter((f) => f.id !== id));
    message.success("ุชู ุญุฐู ุงูุณุคุงู");
  };
  const toggleFaqVisibility = (id) => {
    setFaqs((prev) =>
      prev.map((f) => (f.id === id ? { ...f, visible: !f.visible } : f))
    );
  };
  const moveFaq = (id, dir) => {
    setFaqs((prev) => {
      const list = [...prev].sort((a, b) => a.order - b.order);
      const idx = list.findIndex((f) => f.id === id);
      if (idx === -1) return prev;
      const swapIdx = dir === "up" ? idx - 1 : idx + 1;
      if (swapIdx < 0 || swapIdx >= list.length) return prev;
      const a = list[idx];
      const b = list[swapIdx];
      const tmp = a.order;
      a.order = b.order;
      b.order = tmp;
      return [...list];
    });
  };
  const onSubmitFaq = (values) => {
    const payload = {
      question: values.question,
      answerHtml: values.answerHtml || "",
      visible: !!values.visible,
    };

    if (editingFaq) {
      setFaqs((prev) =>
        prev.map((f) => (f.id === editingFaq.id ? { ...f, ...payload } : f))
      );
      message.success("ุชู ุชุญุฏูุซ ุงูุณุคุงู");
    } else {
      const maxOrder = Math.max(0, ...faqs.map((f) => f.order || 0));
      const maxId = Math.max(0, ...faqs.map((f) => f.id || 0));
      setFaqs((prev) => [
        { id: maxId + 1, order: maxOrder + 1, ...payload },
        ...prev,
      ]);
      message.success("ุชูุช ุฅุถุงูุฉ ุงูุณุคุงู");
    }
    setFaqModalOpen(false);
  };

  // ==== Actions: KB =========================================================
  const openNewKb = () => {
    setEditingKb(null);
    setKbModalOpen(true);
  };
  const openEditKb = (rec) => {
    setEditingKb(rec);
    setKbModalOpen(true);
  };
  const deleteKb = (id) => {
    setKb((prev) => prev.filter((k) => k.id !== id));
    message.success("ุชู ุญุฐู ุงูุนูุตุฑ");
  };
  const toggleKbVisibility = (id) => {
    setKb((prev) =>
      prev.map((k) => (k.id === id ? { ...k, visible: !k.visible } : k))
    );
  };
  const onSubmitKb = (values) => {
    if (editingKb) {
      setKb((prev) =>
        prev.map((k) => (k.id === editingKb.id ? { ...k, ...values } : k))
      );
      message.success("ุชู ุงูุชุญุฏูุซ");
    } else {
      const maxId = Math.max(0, ...kb.map((k) => k.id || 0));
      setKb((prev) => [{ id: maxId + 1, visible: true, ...values }, ...prev]);
      message.success("ุชูุช ุงูุฅุถุงูุฉ");
    }
    setKbModalOpen(false);
  };

  // ==== Tables ==============================================================

  const faqCols = [
    {
      title: "ุงูุชุฑุชูุจ",
      dataIndex: "order",
      width: 90,
      align: "center",
      render: (_, rec) => (
        <div className="flex items-center justify-center gap-1">
          <Tooltip title="ุฑูุน ูุฃุนูู">
            <button
              onClick={() => moveFaq(rec.id, "up")}
              className="p-1 rounded-md hover:bg-gray-100"
            >
              <MoveUp size={16} />
            </button>
          </Tooltip>
          <span className="text-gray-700 font-semibold w-6 text-center">
            {rec.order}
          </span>
          <Tooltip title="ุฅูุฒุงู ูุฃุณูู">
            <button
              onClick={() => moveFaq(rec.id, "down")}
              className="p-1 rounded-md hover:bg-gray-100"
            >
              <MoveDown size={16} />
            </button>
          </Tooltip>
        </div>
      ),
    },
    {
      title: "ุงูุณุคุงู",
      dataIndex: "question",
      width: 380,
      render: (v) => <span className="font-medium">{v}</span>,
    },
    {
      title: "ููุชุทู ุงูุฅุฌุงุจุฉ",
      dataIndex: "answerHtml",
      ellipsis: true,
      render: (html) => (
        <span className="text-gray-600">
          {stripHtml(html).slice(0, 90)}
          {stripHtml(html).length > 90 ? "โฆ" : ""}
        </span>
      ),
    },
    {
      title: "ุงูุญุงูุฉ",
      dataIndex: "visible",
      width: 120,
      align: "center",
      render: (vis) =>
        vis ? <Tag color="green">ุธุงูุฑ</Tag> : <Tag>ูุฎูู</Tag>,
    },
    {
      title: "ุฅุฌุฑุงุกุงุช",
      width: 240,
      align: "center",
      render: (_, rec) => (
        <Space size="small">
          <Tooltip title="ุชุนุฏูู">
            <button
              onClick={() => openEditFaq(rec)}
              className="p-2 rounded-lg border border-gray-200 hover:bg-gray-50"
            >
              <Edit3 size={16} />
            </button>
          </Tooltip>
          <Tooltip title={rec.visible ? "ุฅุฎูุงุก" : "ุฅุธูุงุฑ"}>
            <button
              onClick={() => toggleFaqVisibility(rec.id)}
              className="p-2 rounded-lg border border-gray-200 hover:bg-gray-50"
            >
              {rec.visible ? <EyeOff size={16} /> : <Eye size={16} />}
            </button>
          </Tooltip>
          <Tooltip title="ุญุฐู">
            <button
              onClick={() => deleteFaq(rec.id)}
              className="p-2 rounded-lg border border-gray-200 hover:bg-red-50 text-red-600"
            >
              <Trash2 size={16} />
            </button>
          </Tooltip>
        </Space>
      ),
    },
  ];

  const kbCols = [
    {
      title: "ุงูุนููุงู",
      dataIndex: "title",
      render: (v) => <span className="font-medium">{v}</span>,
    },
    {
      title: "ุงูููุน",
      dataIndex: "type",
      width: 120,
      align: "center",
      render: (t) =>
        t === "video" ? (
          <Tag icon={<Video size={12} />}>ููุฏูู</Tag>
        ) : (
          <Tag icon={<FileText size={12} />}>ููุงู</Tag>
        ),
    },
    {
      title: "ุงูุชุตููู",
      dataIndex: "category",
      width: 140,
      align: "center",
      render: (v) => <Tag color="blue">{v}</Tag>,
    },
    {
      title: "ุงูุฑุงุจุท",
      dataIndex: "url",
      render: (u) => (
        <a
          className="text-blue-600 underline underline-offset-4"
          href={u}
          target="_blank"
        >
          ูุชุญ <ExternalLink className="inline ms-1" size={14} />
        </a>
      ),
    },
    {
      title: "ุงูุญุงูุฉ",
      dataIndex: "visible",
      width: 120,
      align: "center",
      render: (vis) =>
        vis ? <Tag color="green">ููุดูุฑ</Tag> : <Tag>ูุฎููู</Tag>,
    },
    {
      title: "ุฅุฌุฑุงุกุงุช",
      width: 220,
      align: "center",
      render: (_, rec) => (
        <Space size="small">
          <Tooltip title="ุชุนุฏูู">
            <button
              onClick={() => openEditKb(rec)}
              className="p-2 rounded-lg border border-gray-200 hover:bg-gray-50"
            >
              <Edit3 size={16} />
            </button>
          </Tooltip>
          <Tooltip title={rec.visible ? "ุฅุฎูุงุก" : "ุฅุธูุงุฑ"}>
            <button
              onClick={() => toggleKbVisibility(rec.id)}
              className="p-2 rounded-lg border border-gray-200 hover:bg-gray-50"
            >
              {rec.visible ? <EyeOff size={16} /> : <Eye size={16} />}
            </button>
          </Tooltip>
          <Tooltip title="ุญุฐู">
            <button
              onClick={() => deleteKb(rec.id)}
              className="p-2 rounded-lg border border-gray-200 hover:bg-red-50 text-red-600"
            >
              <Trash2 size={16} />
            </button>
          </Tooltip>
        </Space>
      ),
    },
  ];

  // Counters for header
  const faqCounts = useMemo(() => {
    const total = faqs.length;
    const vis = faqs.filter((f) => f.visible).length;
    const hid = total - vis;
    return { total, vis, hid };
  }, [faqs]);

  return (
    <PageLayout>
      <div dir="rtl" className="min-h-screen p-6 bg-gray-50">
        <BreadcrumbsShowcase variant="pill" items={breadcrumbs} />

        <PagesHeader
          title="ุงูุฏุนู ุงูููู"
          subtitle="ูุฑูุฒ ุชุญูู ููุญุชูู ุตูุญุฉ ุงูุฏุนู ูู ุงููููุน: ุงููููุงุชุ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ."
          extra={
            <div className="flex items-center gap-3">
              <Button
                onClick={() => setKbModalOpen(true)}
                type="primary"
                size="large"
                icon={<Plus className="w-5 h-5" />}
              >
                ุฅุถุงูุฉ ูุงุฏุฉ ูุณุงุนุฏุฉ
              </Button>
            </div>
          }
        />

        {/* Tabs */}
        <div className="flex items-center gap-2 mb-6">
          <TabPill
            active={activeTab === "channels"}
            onClick={() => setActiveTab("channels")}
            label="ูููุงุช ูุฅุนุฏุงุฏุงุช ุงูุฏุนู"
          />
          <TabPill
            active={activeTab === "faqs"}
            onClick={() => setActiveTab("faqs")}
            label={`ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ (FAQ) โ ${faqCounts.total}`}
          />
        </div>

        {/* ===================== Channels & Settings ===================== */}
        {activeTab === "channels" && (
          <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
            <SectionCard
              title="ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ"
              extra={
                <Button
                  type="primary"
                  icon={<Save className="w-4 h-4" />}
                  loading={savingSettings}
                  onClick={() => {
                    const form = document.getElementById(
                      "support-settings-form"
                    );
                    form?.dispatchEvent(
                      new Event("submit", { bubbles: true, cancelable: true })
                    );
                  }}
                >
                  ุญูุธ ุงูุชุบููุฑุงุช
                </Button>
              }
            >
              <Form
                id="support-settings-form"
                layout="vertical"
                initialValues={settings}
                onFinish={handleSaveSettings}
                onValuesChange={(_, all) => setSettings(all)}
              >
                <Form.Item label="ุนููุงู ุงูููุฑู ูู ุงููููุน" name="heroTitle">
                  <Input placeholder="ุงูุฏุนู ุงูููู" />
                </Form.Item>
                <Form.Item label="ูุตู ูุตูุฑ/ุณุทุฑ ูุฑุนู" name="heroSubtitle">
                  <Input placeholder="ุฌููุฉ ุชุนุฑูููุฉ ูุตูุฑุฉ ุชุธูุฑ ุชุญุช ุงูุนููุงู" />
                </Form.Item>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Form.Item label="ุฑูู ูุงุชุณุงุจ" name="whatsappNumber">
                    <Input placeholder="+966 55 123 4567" />
                  </Form.Item>
                  <Form.Item label="ูุต ุฒุฑ ูุงุชุณุงุจ" name="whatsappLabel">
                    <Input placeholder="ุนุจุฑ ูุงุชุณุงุจ ูู ููุง" />
                  </Form.Item>
                  <Form.Item label="ุจุฑูุฏ ุงูุฏุนู" name="supportEmail">
                    <Input placeholder="support@example.com" />
                  </Form.Item>
                  <Form.Item
                    label="ุฅุธูุงุฑ ุฒุฑ ูุงุชุณุงุจ"
                    name="showWhatsApp"
                    valuePropName="checked"
                  >
                    <Switch />
                  </Form.Item>
                  <Form.Item
                    label="ุฅุธูุงุฑ ุงูุจุฑูุฏ"
                    name="showEmail"
                    valuePropName="checked"
                  >
                    <Switch />
                  </Form.Item>
                </div>

                <Form.Item
                  label="ููุงุญุธุงุช ุฃููุงุช ุงูุนูู/ุงูุฑุฏ"
                  name="workingNote"
                >
                  <TextArea
                    rows={3}
                    placeholder="ูุซุงู: ุงูุฃุญุฏโุงูุฎููุณ 9 ุต ุฅูู 5 ู..."
                  />
                </Form.Item>

                <Form.Item
                  label="ููุงุญุธุงุช ุฒูู ุงูุญู ุงููุชููุน"
                  name="resolutionNote"
                >
                  <TextArea
                    rows={3}
                    placeholder="ูุซุงู: ุฎูุงู ุฃุณุจูุน ุฅูู ุฃุณุจูุนูู ุญุณุจ ููุน ุงููุดููุฉ..."
                  />
                </Form.Item>
              </Form>
            </SectionCard>

            {/* Preview */}
            <div className="xl:col-span-2">
              <SectionCard title="ูุนุงููุฉ ุณุฑูุนุฉ (ููุง ุณุชุธูุฑ ูู ุงููููุน)">
                <div className="rounded-2xl border border-gray-200 p-6 bg-gradient-to-br from-white to-gray-50">
                  <h2 className="text-2xl font-extrabold text-gray-900 mb-1">
                    {settings.heroTitle || "ุงูุฏุนู ุงูููู"}
                  </h2>
                  <p className="text-gray-600 mb-4">
                    {settings.heroSubtitle ||
                      "ููุฏูู ูู ูููุงุช ุฏุนู ุณุฑูุนุฉ ููุงุถุญุฉ ูุญู ุฃู ูุดููุฉ ุชูุงุฌูู."}
                  </p>

                  <div className="flex flex-wrap gap-2 mb-6">
                    {settings.showWhatsApp && settings.whatsappNumber && (
                      <a
                        href={toWaLink(settings.whatsappNumber)}
                        target="_blank"
                        className="inline-flex items-center gap-2 px-4 py-2 rounded-xl text-white bg-green-600 hover:bg-green-700"
                      >
                        <Headset size={16} />
                        {settings.whatsappLabel || "ุนุจุฑ ูุงุชุณุงุจ ูู ููุง"}
                      </a>
                    )}
                    {settings.showEmail && settings.supportEmail && (
                      <a
                        href={`mailto:${settings.supportEmail}`}
                        className="inline-flex items-center gap-2 px-4 py-2 rounded-xl text-blue-700 bg-blue-100 hover:bg-blue-200"
                      >
                        {settings.supportEmail}
                      </a>
                    )}
                  </div>

                  <div className="space-y-3">
                    <div>
                      <div className="text-sm text-gray-500 mb-1">
                        ุฃููุงุช ุงูุฑุฏ
                      </div>
                      <div className="text-gray-800 bg-white border border-gray-200 rounded-xl p-3">
                        {settings.workingNote}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-500 mb-1">
                        ุงูููุช ุงููุชููุน ููุญู
                      </div>
                      <div className="text-gray-800 bg-white border border-gray-200 rounded-xl p-3">
                        {settings.resolutionNote}
                      </div>
                    </div>
                  </div>
                </div>
              </SectionCard>
            </div>
          </div>
        )}

        {/* ===================== FAQs ===================== */}
        {activeTab === "faqs" && (
          <SectionCard
            title="ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ (FAQ)"
            extra={
              <div className="flex items-center gap-2 flex-wrap">
                <div className="flex items-center gap-2 bg-white border border-gray-200 rounded-xl px-3 py-2">
                  <Search size={16} className="text-gray-500" />
                  <input
                    className="outline-none text-sm w-48"
                    placeholder="ุจุญุซ ูู ุงูุฃุณุฆูุฉโฆ"
                    value={faqQuery}
                    onChange={(e) => setFaqQuery(e.target.value)}
                  />
                </div>

                <div className="flex items-center gap-2">
                  <span className="text-sm text-gray-600">ุงูุญุงูุฉ:</span>
                  <div className="flex items-center gap-1">
                    {[
                      { v: "all", label: "ุงููู", color: "from-slate-400 to-slate-500" },
                      { v: "visible", label: `ุธุงูุฑ (${faqCounts.vis})`, color: "from-emerald-500 to-teal-600" },
                      { v: "hidden", label: `ูุฎูู (${faqCounts.hid})`, color: "from-rose-500 to-red-600" },
                    ].map((t) => (
                      <button
                        key={t.v}
                        onClick={() => setFaqVisFilter(t.v)}
                        className={[
                          "px-3 py-1.5 rounded-xl text-xs font-semibold border",
                          faqVisFilter === t.v
                            ? `text-white border-transparent bg-gradient-to-r ${t.color}`
                            : "bg-white text-gray-700 border-gray-200 hover:bg-gray-50",
                        ].join(" ")}
                      >
                        {t.label}
                      </button>
                    ))}
                  </div>
                </div>

                <Button
                  type="primary"
                  icon={<Plus className="w-4 h-4" />}
                  onClick={openNewFaq}
                >
                  ุฅุถุงูุฉ ุณุคุงู
                </Button>
              </div>
            }
          >
            <Table
              rowKey="id"
              dataSource={filteredFaqs}
              columns={faqCols}
              size="middle"
              pagination={{ pageSize: 8, position: ["bottomCenter"] }}
              expandable={{
                expandedRowRender: (rec) => (
                  <div className="prose prose-sm max-w-none rtl text-gray-800">
                    <div
                      className="[&>*]:mb-2"
                      dangerouslySetInnerHTML={{
                        __html: rec.answerHtml || "",
                      }}
                    />
                  </div>
                ),
                rowExpandable: (rec) => !!rec.answerHtml,
              }}
            />
          </SectionCard>
        )}

        {/* ===== FAQ Modal (Rich Text) ===== */}
        <Modal
          title={editingFaq ? "ุชุนุฏูู ุณุคุงู" : "ุฅุถุงูุฉ ุณุคุงู ุฌุฏูุฏ"}
          open={faqModalOpen}
          onCancel={() => setFaqModalOpen(false)}
          footer={null}
          destroyOnClose
        >
          <Form
            layout="vertical"
            onFinish={onSubmitFaq}
            initialValues={
              editingFaq || {
                question: "",
                answerHtml: "",
                visible: true,
              }
            }
          >
            <Form.Item
              label="ุงูุณุคุงู"
              name="question"
              rules={[{ required: true, message: "ุงูุชุจ ุงูุณุคุงู" }]}
            >
              <Input placeholder="ุงูุชุจ ุงูุณุคุงู ููุง" />
            </Form.Item>

            <Form.Item
              label="ุงูุฅุฌุงุจุฉ"
              name="answerHtml"
              rules={[{ required: true, message: "ุงูุชุจ ุงูุฅุฌุงุจุฉ" }]}
              valuePropName="value"
              getValueFromEvent={(v) => v}
            >
              <ReactQuill theme="snow" modules={quillModules} />
            </Form.Item>

            <Form.Item
              label="ุธุงูุฑ ุนูู ุงููููุน"
              name="visible"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>
            <div className="flex justify-end gap-2">
              <Button onClick={() => setFaqModalOpen(false)} type="secondary">
                ุฅูุบุงุก
              </Button>
              <Button
                type="primary"
                htmltype="submit"
                icon={<Save className="w-4 h-4" />}
              >
                ุญูุธ
              </Button>
            </div>
          </Form>
        </Modal>

        {/* ===== KB Modal ===== */}
        <Modal
          title={editingKb ? "ุชุนุฏูู ูุงุฏุฉ ูุณุงุนุฏุฉ" : "ุฅุถุงูุฉ ูุงุฏุฉ ูุณุงุนุฏุฉ"}
          open={kbModalOpen}
          onCancel={() => setKbModalOpen(false)}
          footer={null}
          destroyOnClose
        >
          <Form
            layout="vertical"
            onFinish={onSubmitKb}
            initialValues={
              editingKb || {
                title: "",
                type: "article",
                category: "",
                url: "",
                visible: true,
              }
            }
          >
            <Form.Item
              label="ุงูุนููุงู"
              name="title"
              rules={[{ required: true, message: "ุงูุชุจ ุงูุนููุงู" }]}
            >
              <Input placeholder="ุนููุงู ุงููุงุฏุฉ" />
            </Form.Item>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Form.Item label="ุงูููุน" name="type" rules={[{ required: true }]}>
                <Select
                  options={[
                    { value: "article", label: "ููุงู" },
                    { value: "video", label: "ููุฏูู" },
                  ]}
                />
              </Form.Item>
              <Form.Item
                label="ุงูุชุตููู"
                name="category"
                rules={[{ required: true, message: "ุงุฎุชุฑ ุงูุชุตููู" }]}
              >
                <Input placeholder="ูุซุงู: ุงูุญุณุงุจุงุช / ุงูุฏูุน / ุงููุงุฌุจุงุช" />
              </Form.Item>
            </div>
            <Form.Item
              label="ุงูุฑุงุจุท (ุตูุญุฉ ุฏุงุฎููุฉ ุฃู ุฑุงุจุท ุฎุงุฑุฌู)"
              name="url"
              rules={[{ required: true, message: "ุฃุฏุฎู ุฑุงุจุทูุง ุตุญูุญูุง" }]}
            >
              <Input placeholder="ูุซุงู: /help/create-account ุฃู https://..." />
            </Form.Item>
            <Form.Item
              label="ููุดูุฑ ุนูู ุงููููุน"
              name="visible"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>
            <div className="flex justify-end gap-2">
              <Button onClick={() => setKbModalOpen(false)} type="secondary">
                ุฅูุบุงุก
              </Button>
              <Button
                type="primary"
                htmltype="submit"
                icon={<Save className="w-4 h-4" />}
              >
                ุญูุธ
              </Button>
            </div>
          </Form>
        </Modal>
      </div>
    </PageLayout>
  );
}
